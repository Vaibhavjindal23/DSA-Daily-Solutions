✅ 1. Find the Duplicate Number (Floyd’s Tortoise and Hare Algorithm)
# Find the Duplicate Number

## Problem Description

You are given an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive. There is only one repeated number in `nums`, but it may appear more than once.

Your task is to find the duplicate number using **constant extra space**, without modifying the array.

## Approach

We use **Floyd’s Tortoise and Hare (Cycle Detection)** algorithm. We treat the array as a **linked list** where each index points to `nums[i]`. A duplicate value creates a **cycle** in this list.

### Steps:

1. Use two pointers `slow` and `fast` to find the **meeting point inside the cycle**.
2. Reset one pointer to the start, and move both one step at a time.
3. The point where they meet again is the **duplicate number**.

## Code

```cpp
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow = nums[0];
        int fast = nums[0];

        // Phase 1: Find the intersection point in the cycle
        do {
            slow = nums[slow];
            fast = nums[nums[fast]];
        } while (slow != fast);

        // Phase 2: Find the entrance to the cycle (duplicate number)
        slow = nums[0];
        while (slow != fast) {
            slow = nums[slow];
            fast = nums[fast];
        }

        return slow;
    }
};
Complexity
Time Complexity: O(n)

Space Complexity: O(1)

Example
Input: [1,3,4,2,2]
Output: 2

🔁 2. Diameter of a Binary Tree
# Diameter of a Binary Tree

## Problem Description

Given the `root` of a binary tree, return the **length of the diameter** of the tree.

The diameter of a binary tree is the **length of the longest path between any two nodes**, measured in number of edges. The path may or may not pass through the root.

## Approach

We use a **DFS (Depth-First Search)** approach to compute the **height** of each subtree. At each node, the sum of left and right subtree heights gives the **path length** through that node.

We track the **maximum path length** encountered during traversal.

## Code

```cpp
class Solution {
public:
    int maxDiameter = 0;

    int dfs(TreeNode* node) {
        if (node == nullptr) return 0;

        int left = dfs(node->left);
        int right = dfs(node->right);

        maxDiameter = max(maxDiameter, left + right);
        return 1 + max(left, right);
    }

    int diameterOfBinaryTree(TreeNode* root) {
        dfs(root);
        return maxDiameter;
    }
};

Complexity
Time Complexity: O(n), where n is the number of nodes

Space Complexity: O(h), where h is the height of the tree (recursive call stack)

Input: [1,2,3,4,5]
Output: 3
Explanation: Longest path is [4,2,1,3]
