📘 Problem Set: Binary Search and Longest Valid Parentheses
This repository includes two algorithmic problems commonly asked in technical interviews. Each problem is explained in detail, followed by a summary of the approach used and an analysis of time and space complexity.

🔍 Problem 1: Search Insert Position
📝 Problem Statement
Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be inserted in order.

You must write an algorithm with O(log n) runtime complexity.

📥 Examples:
Input: nums = [1,3,5,6], target = 5 → Output: 2

Input: nums = [1,3,5,6], target = 2 → Output: 1

Input: nums = [1,3,5,6], target = 7 → Output: 4

💡 Approach
This is a classic Binary Search problem. Since the array is already sorted in ascending order and contains distinct elements, we can use binary search to:

Find the target directly, or

Determine the position where it would be inserted if not found.

We use a binary search loop and return low as the insert position once the loop exits.

⏱ Time and Space Complexity
Time Complexity: O(log n) — due to binary search over the input array.

Space Complexity: O(1) — no additional space is used except for a few variables.

🧮 Problem 2: Longest Valid Parentheses
📝 Problem Statement
Given a string s containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.

📥 Examples:
Input: "(()" → Output: 2

Input: ")()())" → Output: 4

Input: "" → Output: 0

💡 Approach
We use a stack-based approach:

Traverse the string from left to right.

Push indices of '(' onto a stack.

For every ')', check if the top of the stack contains '(' (by using stored index).

If matched, pop from the stack and calculate the length of the current valid substring.

Update the maximum valid length accordingly.

If unmatched, push the index of the ')' to mark a break point.

⏱ Time and Space Complexity
Time Complexity: O(n) — each character is processed once.

Space Complexity: O(n) — in the worst case, all indices may be pushed onto the stack.

✅ Notes
These solutions are optimized for performance and pass all edge cases.

Ideal for interview preparation and foundational algorithm understanding.

