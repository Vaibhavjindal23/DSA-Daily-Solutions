/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(l1 == nullptr){
            return l2;
        }
        if(l2 == nullptr){
            return l1;
        }
        ListNode* dummy = new ListNode(-1);
        ListNode* temp = dummy; 
        ListNode* temp1 = l1;
        ListNode* temp2 = l2; 
        int carry = 0; int sum = 0; 
        while(temp1 !=nullptr && temp2 !=nullptr){
            sum = temp1->val + temp2->val + carry;
            int value = sum % 10;
            carry = sum / 10; 
            ListNode* newnode = new ListNode(value);
            temp->next = newnode;
            temp = newnode;
            temp1 = temp1->next;
            temp2 = temp2->next;
        }
        while(temp1!=nullptr){
            sum = temp1->val + carry; 
            int value = sum % 10; 
            carry = sum / 10; 
            ListNode* newnode = new ListNode(value);
            temp->next = newnode;
            temp = newnode;
            temp1 = temp1->next;
        } 
        while(temp2!=nullptr){
            sum = temp2->val + carry; 
            int value = sum % 10; 
            carry = sum / 10; 
            ListNode* newnode = new ListNode(value);
            temp->next = newnode;
            temp = newnode;
            temp2 = temp2->next;
        } 
        if(carry == 1){
            ListNode* newnode = new ListNode(carry);
            temp->next = newnode;
            temp = newnode;
            temp->next = nullptr;
        }
    return dummy->next;
    }
};
