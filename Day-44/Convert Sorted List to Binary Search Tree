/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void convert_to_array(ListNode* head,vector<int>&ans){
       if(head == nullptr) return ;
       ListNode* node = head;
       while(node!=nullptr){
           ans.push_back(node->val);
           node =node->next;
       }
    }
    TreeNode* helper(vector<int>&ans, int left, int right){
        if(left >right) return nullptr;
        int mid= left +(right-left)/2;
        TreeNode* node = new TreeNode(ans[mid]);
        node->left = helper(ans, left, mid -1);
        node->right = helper(ans , mid + 1, right);
        return node;
    }
    TreeNode* sortedListToBST(ListNode* head) {
        if(head == nullptr) return nullptr;
        vector<int>ans;
        convert_to_array(head, ans);
        int n = ans.size();
     TreeNode* node =   helper(ans, 0, n-1);
        return node;
    }
};
