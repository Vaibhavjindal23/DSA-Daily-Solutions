🏛️ Find the Town Judge
📝 Problem Statement
In a town, there are n people labeled from 1 to n. A rumor says that one of them is secretly the town judge. The town judge must satisfy two conditions:

The town judge trusts nobody.

Everybody else (i.e., n - 1 people) trust the town judge.

You are given an array trust where trust[i] = [a, b] means person a trusts person b.

Your task is to identify the town judge based on the given trust relationships and return their label (1-indexed), or return -1 if no judge exists.

🔍 Approach
To identify the town judge:

We track how many people trust each person using an indegree array.

We also track how many people each person trusts using an outdegree array.

For a person to be the judge:

Their indegree should be n - 1 (everyone else trusts them),

Their outdegree should be 0 (they trust no one).

We iterate over all people from 1 to n, checking who satisfies both conditions.

If such a person is found, return their label; otherwise, return -1.

⏱️ Time and Space Complexity
Complexity	Value
Time	O(T + N), where T is the number of trust relationships, and N is the number of people
Space	O(N) for both indegree and outdegree arrays


                         📏 Greatest Common Divisor of Strings
📝 Problem Statement
For two strings s and t, we say "t divides s" if and only if s = t + t + t + ... + t (i.e., t is concatenated with itself one or more times to get s).

Given two strings str1 and str2, return the largest string x such that:

x divides both str1 and str2.

If no such string exists, return an empty string "".

💡 Examples
Input: str1 = "ABCABC", str2 = "ABC"
Output: "ABC"

Input: str1 = "ABABAB", str2 = "ABAB"
Output: "AB"

Input: str1 = "LEET", str2 = "CODE"
Output: ""

🔍 Approach
Check Compatibility:

Concatenate str1 + str2 and str2 + str1.

If they’re not equal, there is no common repeating pattern — return "".

Use GCD of Lengths:

If the strings are compatible, the largest possible dividing string will have a length equal to gcd(len(str1), len(str2)).

Extract the Candidate Substring:

Return the substring of str1 from index 0 to gcd(length).

⏱️ Time and Space Complexity
Complexity	Value
Time	O(N + M), where N and M are lengths of the strings (for concatenation and substring comparison)
Space	O(1) additional space (ignoring input/output storage)       
