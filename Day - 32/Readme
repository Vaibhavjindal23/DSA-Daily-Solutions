🧩 Problem 1: Rotate Image (90 Degrees Clockwise)
📝 Problem Statement
You are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees clockwise, in-place. This means you must modify the input matrix directly without allocating another 2D matrix.

Example 1:
Input:
[[1, 2, 3],
[4, 5, 6],
[7, 8, 9]]

Output:
[[7, 4, 1],
[8, 5, 2],
[9, 6, 3]]

Example 2:
Input:
[[5, 1, 9, 11],
[2, 4, 8, 10],
[13, 3, 6, 7],
[15, 14, 12, 16]]

Output:
[[15, 13, 2, 5],
[14, 3, 4, 1],
[12, 6, 8, 9],
[16, 7, 10, 11]]

✅ Constraints
n == matrix.length == matrix[i].length

1 <= n <= 20

-1000 <= matrix[i][j] <= 1000

✅ Approach
To rotate the matrix in-place:

Transpose the matrix — swap matrix[i][j] with matrix[j][i].

Reverse each row — this aligns the elements into their new rotated positions.

This two-step process effectively rotates the matrix 90 degrees clockwise without using extra space.

⏱️ Time Complexity
O(n²) — Each element is visited once during transpose and once during reversal.

🧠 Space Complexity
O(1) — Rotation is done in-place using constant extra space.

🌲 Problem 2: Binary Tree Level Order Traversal
📝 Problem Statement
Given the root of a binary tree, return the level order traversal of its nodes' values (i.e., from left to right, level by level).

Example 1:
Input: [3, 9, 20, null, null, 15, 7]
Output: [[3], [9, 20], [15, 7]]

Example 2:
Input: [1]
Output: [[1]]

Example 3:
Input: []
Output: []

✅ Constraints
The number of nodes in the tree is in the range [0, 2000]

-1000 <= Node.val <= 1000

✅ Approach
We use Breadth-First Search (BFS) with a queue to traverse the tree level by level:

Push the root node into a queue.

While the queue is not empty:

Get the number of nodes at the current level.

Process each node at that level: add its value to a temporary list and enqueue its children.

Add the list of values for the current level to the final result.

This ensures nodes are grouped level by level in the output.

⏱️ Time Complexity
O(n) — Each node is visited exactly once.

🧠 Space Complexity
O(n) — Queue holds nodes of a single level at most, which could be up to n in the worst case.
