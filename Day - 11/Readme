# Trailing Zeroes in Factorial & Remove Nth Node from End of List

## Problem Statements

### Problem 1: Trailing Zeroes in Factorial

Given an integer `n`, return the number of trailing zeroes in `n!` (n factorial). A trailing zero is created with multiples of 10, and since 10 is the product of 2 and 5, the number of trailing zeroes is determined by the number of 5s in the factorization of `n!`.

#### Example:

* **Input:** n = 5

* **Output:** 1

* **Explanation:** 5! = 120, one trailing zero.

* **Input:** n = 3

* **Output:** 0

* **Explanation:** 3! = 6, no trailing zero.

#### Constraints:

* `0 <= n <= 10^4`

---

### Problem 2: Remove Nth Node from End of List

Given the head of a linked list, remove the `n`th node from the end of the list and return its head. The solution should ideally be optimized to a one-pass algorithm.

#### Example:

* **Input:** head = \[1,2,3,4,5], n = 2

* **Output:** \[1,2,3,5]

* **Input:** head = \[1], n = 1

* **Output:** \[]

* **Input:** head = \[1,2], n = 1

* **Output:** \[1]

#### Constraints:

* The number of nodes in the list is `sz`.
* `1 <= sz <= 30`
* `0 <= Node.val <= 100`
* `1 <= n <= sz`

---

## Solution Approach

### Trailing Zeroes in Factorial

To find the number of trailing zeroes in `n!`, we count the number of factors of 5 in all numbers from `1` to `n`. This is because the number of 2s is always greater than or equal to the number of 5s, so the limiting factor is the number of 5s.

We achieve this by:

1. Dividing `n` by 5, then by 25, then by 125, and so on.
2. Summing the results gives the total count of trailing zeroes.

### Remove Nth Node from End of List

To remove the `n`th node from the end:

1. Calculate the length of the linked list.
2. Find the position of the node to be deleted from the start: `length - n + 1`.
3. Traverse to the node, maintain a reference to its previous node, and adjust pointers to remove it.

The optimal one-pass solution uses two pointers that are `n` nodes apart, allowing the removal in a single traversal.

---

## Time Complexity Analysis

### Trailing Zeroes in Factorial

* **Time Complexity:** O(logâ‚…(n))
* **Reason:** Each division by 5 reduces the problem size by a factor of 5.

### Remove Nth Node from End of List

* **Time Complexity:** O(L), where L is the length of the list.
* **Reason:** We only traverse the list a single time.

---

## Space Complexity Analysis

### Trailing Zeroes in Factorial

* **Space Complexity:** O(1)
* **Reason:** Only a constant amount of extra space is used.

### Remove Nth Node from End of List

* **Space Complexity:** O(1)
* **Reason:** No extra space is required other than a few pointers.
