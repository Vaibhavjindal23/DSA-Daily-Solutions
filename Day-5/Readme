📃 Problem 1: Valid Perfect Square
Problem Statement
You are given a positive integer num. Return true if num is a perfect square, and false otherwise.

A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer multiplied by itself.

Note:
You must not use any built-in library function like sqrt().

Example 1:
Input: num = 16
Output: true
Explanation: We return true because 4 * 4 = 16, and 4 is an integer.

Example 2:
Input: num = 14
Output: false
Explanation: We return false because 3.742 * 3.742 = 14, and 3.742 is not an integer.

Constraints:
1 <= num <= 2^31 - 1

Approach 1: Linear Search
We can check if a number is a perfect square by iterating through all integers and checking if the square of each integer equals the given number. However, this approach is inefficient for large numbers, as it takes O(√num) time.

Approach 2: Binary Search
A more efficient way to check if a number is a perfect square is by using binary search. The idea is to find the integer whose square is equal to the given number.
Initialize two pointers: low = 1 and high = num.
Use binary search to check the square of the middle element (mid) in the range [low, high].
If the square of mid equals num, return true.
If the square of mid is greater than num, move high to mid - 1.
If the square of mid is less than num, move low to mid + 1.
If the loop ends, return false as no integer squared to num.

Conclusion:
Approach 1 (Linear Search) works but is inefficient for larger numbers.
Approach 2 (Binary Search) is efficient and runs in logarithmic time.

...............................................................................................................................................................................................................................
📃 Problem 2: Palindrome Linked List
Problem Statement:
Given the head of a singly linked list, return true if the linked list is a palindrome, or false otherwise.

🧾 Examples
Example 1:
Input: head = [1, 2, 2, 1]
Output: true

Example 2:
Input: head = [1, 2]
Output: false

🔒 Constraints:
Number of nodes: 1 ≤ n ≤ 10⁵

Node values: 0 ≤ Node.val ≤ 9

✅ Approach 1: Stack-Based Comparison
🔧 Idea:
Traverse the linked list and push all elements onto a stack.

Traverse the list again from the head.

For each node, pop from the stack and compare with the current node's value.

If all values match, it's a palindrome.

🧠 Why it works:
A stack reverses the order of elements (LIFO), so by comparing with the original sequence, we can check if the list is the same forward and backward.

⏱ Time Complexity:
O(n): We traverse the list twice.

🗂 Space Complexity:
O(n): We use a stack that stores all node values.

🔽 Drawback:
Uses extra space proportional to the number of nodes, which violates the O(1) space constraint in the follow-up.

✅ Approach 2: Fast and Slow Pointer + Reverse Second Half
🔧 Idea:
Use two pointers (slow and fast) to find the middle of the list.

Reverse the second half of the list in place.

Compare values of the first half and reversed second half.

Return true if all nodes match; otherwise false.

🧠 Why it works:
Palindromes are symmetric. By reversing the second half, we can directly compare the two halves.

⏱ Time Complexity:
O(n): One pass to find the middle, one to reverse, and one to compare.

🗂 Space Complexity:
O(1): We use a few pointers and modify the list in place.
✅ Approach 2 is clearly better as it satisfies the follow-up condition (O(n) time and O(1) space) and avoids extra data structures.
