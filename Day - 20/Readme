ðŸ“˜ Problem 1: Evaluate Reverse Polish Notation
ðŸ”¹ Problem Statement
You are given an array of strings tokens that represents an arithmetic expression in Reverse Polish Notation (RPN). You must evaluate the expression and return the result as an integer.

Rules:

Valid operators are '+', '-', '*', '/'.

Each operand may be an integer or another expression.

Integer division should truncate toward zero.

Input is guaranteed to be a valid RPN expression.

All intermediate results fit in a 32-bit signed integer.

ðŸ”¹ Approach Explanation
The algorithm uses a stack to evaluate the RPN expression:

Iterate through the tokens list.

If the current token is a number, convert it to an integer and push it onto the stack.

If the current token is an operator, pop the top two numbers from the stack. These two values are used as operands â€” the first popped value is the second operand, and the second popped is the first operand.

Apply the operator to the two operands using a helper function.

Push the result back onto the stack.

After processing all tokens, the result of the entire expression is the single remaining value on the stack.

This approach eliminates the need to build a full expression tree or convert from infix to postfix.

ðŸ”¹ Time Complexity
The time complexity is O(n), where n is the number of tokens. Each token is processed once.

ðŸ”¹ Space Complexity
The space complexity is O(n) for the stack, in the worst case when all tokens are numbers before an operator is encountered.

ðŸ“˜ Problem 2: Greatest Common Divisor of Smallest and Largest Number
ðŸ”¹ Problem Statement
You are given an integer array nums. Return the greatest common divisor (GCD) of the smallest and the largest number in the array.

Rules:

The GCD of two numbers is the largest positive integer that divides both numbers without a remainder.

The array has at least two elements.

Elements are all positive integers (between 1 and 1000 inclusive).

ðŸ”¹ Approach Explanation
The problem is solved using the Euclidean Algorithm:

Traverse the array to find the minimum and maximum elements.

Apply the Euclidean algorithm to compute the GCD of these two numbers:

Repeatedly assign a = b and b = a % b until b becomes zero.

When b becomes zero, a will contain the GCD.

Return the result.

This approach leverages the fact that the GCD only depends on the smallest and largest numbers, so we donâ€™t need to process all pairs.

ðŸ”¹ Time Complexity
The time complexity is O(n + log(max)), where n is the length of the array and max is the largest number in the array. O(n) is for scanning the array to find min and max, and O(log(max)) is for the GCD calculation using the Euclidean algorithm.

ðŸ”¹ Space Complexity
The space complexity is O(1) as no extra space is used beyond a few integer variables.
