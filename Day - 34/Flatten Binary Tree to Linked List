/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void create(vector<int>&ans,TreeNode* root ){
         int n = ans.size();
         TreeNode* temp = root;
         temp->left= nullptr;
         for(int i =1; i<n; i++){
            TreeNode* newnode = new TreeNode(ans[i]);
            temp->right = newnode;
            temp->left = nullptr;
            temp = newnode;
         }
         temp->right = nullptr;
    }
    void helper(TreeNode* root,vector<int>&ans){
        if(root == nullptr) return;
        ans.push_back(root->val);
        helper(root->left,ans);
        helper(root->right,ans);
    }
    void flatten(TreeNode* root) {
        if(root == nullptr || (root->right == nullptr  && root->left == nullptr)) return;
        vector<int>ans;
        helper(root, ans);
        create(ans,root);
    }
};
