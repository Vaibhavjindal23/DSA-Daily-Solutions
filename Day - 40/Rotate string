class Solution {
public:
    bool rotateString(string s, string goal) {
        return s.size() == goal.size() && (s+s).find(goal) != string::npos;
    }
};








// class Solution {
// public:
//     void reverse(int i, int j, string &s){
//         while(i <= j){
//             swap(s[i], s[j]);
//             i++;
//             j--;
//         }
//     }
//     void rotate(string &s, int k){
//         int n = s.size();
//       k = k % n;
//       reverse(0, k-1, s);
//       reverse(k, n-1, s);
//       reverse(0, n-1, s);
//     }
//     bool rotateString(string s, string goal) {
//         int n = s.size();
//         int m = goal.size();
//         if(n != m ) return false;
//         for(int k = 0; k<n; k++){
//             string temp = s;
//             rotate(temp, k);
//             if(temp == goal) return true;
//         }
//         return false;
//     }
// };
